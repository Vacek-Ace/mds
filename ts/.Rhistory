library(package, character.only=T)
}
}
my_t_test <- function (object, ...)
{
par <- rbind(t_stat=tidy(object)$statistic, p_value=tidy(object)$p.value)
colnames(par) <- tidy(object)$term
if (NCOL(par) > 0) {
cat("\nt-test:\n")
coef <- round(par, digits = 4)
print.default(coef, print.gap = 2)
}
}
my_tsresiduals <- function (data, ...) {
if (!fabletools::is_mable(data)) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
data <- stats::residuals(data)
if (n_keys(data) > 1) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
gg_tsdisplay(data, !!sym(".resid"), plot_type = "partial",
...)
}
air = as_tsibble(AirPassengers, index = date)
air$index
air %>%
autoplot(value) +
labs(title = "Monthly totals of international airline passengers") +
xlab("Year") + ylab("passengers")
air_train <- air %>% filter_index(. ~ "1959-12")
air_test <- air %>% filter_index(1960 ~ .)
air_train %>%
gg_season(value, labels = "right")
air_train %>%
model(seats = feasts:::SEATS(value)) %>%
components() %>%
autoplot()
lambda <- air_train %>%
features(value, features = guerrero) %>% pull(lambda_guerrero)
lambda
air_train %>% autoplot(log(value)) +
labs(y = "Log transformed")
air_train %>%
features(log(value), unitroot_kpss)
air_train %>%
features(difference(log(value), 1), unitroot_kpss)
air_train %>% autoplot(difference(log(value), 1))
air_train %>%
mutate(log_turnover = difference(log(value),1)) %>%
features(log_turnover, unitroot_nsdiffs)
fit <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,0) + PDQ(0,1,0)))
fit %>% my_tsresiduals(lag_max =36)
fit2 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,0)))
fit2 %>% my_tsresiduals(lag_max =36)
report(fit2)
my_t_test(fit2)
gg_arma(fit2)
fit3 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,1)))
fit3 %>% my_tsresiduals(lag_max =36)
report(fit3)
my_t_test(fit3)
aug <-fit3 %>% augment()
# Histogram
aug %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 50) +
ggtitle("Histogram of residuals")
# Student's t-Test for mean=0
t.test(aug$.resid)
# Ljung-Box autocorrelation lag=2*m
aug %>% features(.resid, ljung_box, lag=24, dof=2)
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
my_t_test <- function (object, ...)
{
par <- rbind(t_stat=tidy(object)$statistic, p_value=tidy(object)$p.value)
colnames(par) <- tidy(object)$term
if (NCOL(par) > 0) {
cat("\nt-test:\n")
coef <- round(par, digits = 4)
print.default(coef, print.gap = 2)
}
}
my_tsresiduals <- function (data, ...) {
if (!fabletools::is_mable(data)) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
data <- stats::residuals(data)
if (n_keys(data) > 1) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
gg_tsdisplay(data, !!sym(".resid"), plot_type = "partial",
...)
}
air = as_tsibble(AirPassengers, index = date)
air$index
air %>%
autoplot(value) +
labs(title = "Monthly totals of international airline passengers") +
xlab("Year") + ylab("passengers")
air_train <- air %>% filter_index(. ~ "1959-12")
air_test <- air %>% filter_index(1960 ~ .)
air_train %>%
gg_season(value, labels = "right")
air_train %>%
model(seats = feasts:::SEATS(value)) %>%
components() %>%
autoplot()
resid_corr <- function(modelo, df_modelo, estacionalidad, show_pvals_plor = TRUE){
pvals <- c
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljunbox, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
median_pvals <- media(na.omit(pvals))
if (show_pvals_plor) {
plot(pvals)
}
return(median_pvals)
}
resid_corr(aug, 2, 12)
resid_corr(aug, 2, 12)
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals_plor = TRUE){
pvals <- c
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljunbox, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
median_pvals <- media(na.omit(pvals))
if (show_pvals_plor) {
plot(pvals)
}
return(median_pvals)
}
resid_corr(aug, 2, 12)
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals_plor = TRUE){
pvals <- c
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
median_pvals <- media(na.omit(pvals))
if (show_pvals_plor) {
plot(pvals)
}
return(median_pvals)
}
resid_corr(aug, 2, 12)
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals_plor = TRUE){
pvals <- c
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
median_pvals <- median(na.omit(pvals))
if (show_pvals_plor) {
plot(pvals)
}
return(median_pvals)
}
resid_corr(aug, 2, 12)
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals_plot = TRUE){
pvals <- c
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
median_pvals <- median(na.omit(pvals))
if (show_pvals_plot == TRUE) {
plot(pvals)
}
return(median_pvals)
}
resid_corr(aug, 2, 12)
pvals = resid_corr(aug, 2, 12)
pvals
resid_corr <- function(modelo, dof_modelo, estacionalidad){
pvals <- c
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
return(pvals)
}
pvals = resid_corr(aug, 2, 12)
pvals
resid_corr <- function(modelo, dof_modelo, estacionalidad){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
return(pvals)
}
pvals = resid_corr(aug, 2, 12)
pvals
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals = TRUE){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
if (show_pvals) {
plot(pvals)
}
return(pvals)
}
pvals = resid_corr(aug, 2, 12)
pvals
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals = TRUE){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
if (show_pvals) {
plot(pvals)
abline(0.05, 0)
}
return(pvals)
}
pvals = resid_corr(aug, 2, 12)
pvals
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "ForeCA", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison %>%
mutate(quarter = yearquarter(date)) %>%
select(-date) %>%
as_tsibble(key = c(state, gender, legal, indigenous), index = quarter)
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "ForeCA", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
tourism
mydata <- tsibble(
year = 2012:2016,
y = c(123, 39, 78, 52, 110),
index = year
)
mydata
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison %>%
mutate(quarter = yearquarter(date)) %>%
select(-date) %>%
as_tsibble(key = c(state, gender, legal, indigenous), index = quarter)
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
View(prison)
melsyd_economy <- ansett %>%
filter(Airports == "MEL-SYD", Class=="Economy")
melsyd_economy %>%
autoplot(Passengers) +
labs(title = "Ansett economy class passengers", subtitle = "Melbourne-Sydney") +
xlab("Year")
beer <- aus_production %>%
select(Quarter, Beer) %>%
filter(year(Quarter) >= 1992)
beer %>% gg_season(Beer, labels = "right")
beer <- aus_production %>%
select(Quarter, Beer) %>%
filter(year(Quarter) >= 1992)
beer %>% gg_season(Beer, labels = "right")
beer <- aus_production %>%
select(Quarter, Beer) %>%
filter(year(Quarter) >= 1992)
beer %>% gg_season(Beer, labels = "right")
beer <- aus_production %>%
select(Quarter, Beer) %>%
filter(year(Quarter) >= 1992)
beer %>% gg_season(Beer, labels = "right")
beer <- aus_production %>%
select(Quarter, Beer) %>%
filter(year(Quarter) >= 1992)
beer %>% gg_season(Beer, labels = "right")
beer %>% gg_subseries(Beer, labels = "right")
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand) +
xlab("Year: 2014") + ylab(NULL) +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand) +
xlab("Year: 2014") + ylab(NULL) +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
vic_elec %>%
filter(year(Time) == 2014) %>%
ggplot(aes(x = Temperature, y = Demand)) +
geom_point() +
ylab("Demand (GW)") + xlab("Temperature (Celsius)")
visitors <- tourism %>%
group_by(State) %>%
summarise(Trips = sum(Trips))
visitors %>%
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
ylab("Number of visitor nights each quarter (millions)")
visitors %>%
spread(State, Trips) %>%
GGally::ggpairs(columns = 2:9)
recent_production <- aus_production %>%
filter(year(Quarter) >= 1992)
recent_production %>% gg_lag(Beer, geom="point")
recent_production %>% ACF(Beer) %>% autoplot()
food <- aus_retail %>%
filter(Industry == "Food retailing") %>%
summarise(Turnover = sum(Turnover))
food%>% autoplot(Turnover)
lambda <- food %>%
features(Turnover, features = guerrero) %>% pull(lambda_guerrero)
food %>% autoplot(box_cox(Turnover,lambda)) +
labs(y = "Box-Cox transformed turnover")
food %>% autoplot(log(Turnover)) +
labs(y = "Box-Cox transformed turnover")
us_retail_employment <- us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
select(-Series_ID)
us_retail_employment %>%
model(classical_decomposition(Employed, type = "additive")) %>%
components() %>%
autoplot() + xlab("Year") +
ggtitle("Classical additive decomposition of total US retail employment")
x11_dcmp <- us_retail_employment %>%
model(x11 = feasts:::X11(Employed, type = "additive")) %>%
components()
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison %>%
mutate(quarter = yearquarter(date))
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison %>%
mutate(quarter = yearquarter(date)) %>%
select(-date) %>%
as_tsibble(key = c(state, gender, legal, indigenous), index = quarter)
yearquarter(prsion$date)
yearquarter(prison$date)
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date) %>%
as_tsibble(key = c(State, Gender, Legal, Indigenous), index = Quarter)
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date) %>%
as_tsibble(key = c(State, Gender, Legal, Indigenous), index = Quarter)
prison
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "ForeCA", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
tourism
mydata <- tsibble(
year = 2012:2016,
y = c(123, 39, 78, 52, 110),
index = year
)
mydata
prison <- readr::read_csv("https://OTexts.com/fpp3/extrafiles/prison_population.csv")
prison <- prison %>%
mutate(Quarter = yearquarter(Date)) %>%
select(-Date) %>%
as_tsibble(key = c(State, Gender, Legal, Indigenous), index = Quarter)
prison
melsyd_economy <- ansett %>%
filter(Airports == "MEL-SYD", Class=="Economy")
melsyd_economy %>%
autoplot(Passengers) +
labs(title = "Ansett economy class passengers", subtitle = "Melbourne-Sydney") +
xlab("Year")
beer <- aus_production %>%
select(Quarter, Beer) %>%
filter(year(Quarter) >= 1992)
beer %>% gg_season(Beer, labels = "right")
beer %>% gg_subseries(Beer, labels = "right")
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand) +
xlab("Year: 2014") + ylab(NULL) +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand) +
xlab("Year: 2014") + ylab(NULL) +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
vic_elec %>%
filter(year(Time) == 2014) %>%
ggplot(aes(x = Temperature, y = Demand)) +
geom_point() +
ylab("Demand (GW)") + xlab("Temperature (Celsius)")
visitors <- tourism %>%
group_by(State) %>%
summarise(Trips = sum(Trips))
visitors %>%
ggplot(aes(x = Quarter, y = Trips)) +
geom_line() +
facet_grid(vars(State), scales = "free_y") +
ylab("Number of visitor nights each quarter (millions)")
visitors %>%
spread(State, Trips) %>%
GGally::ggpairs(columns = 2:9)
recent_production <- aus_production %>%
filter(year(Quarter) >= 1992)
recent_production %>% gg_lag(Beer, geom="point")
recent_production %>% ACF(Beer) %>% autoplot()
food <- aus_retail %>%
filter(Industry == "Food retailing") %>%
summarise(Turnover = sum(Turnover))
food%>% autoplot(Turnover)
lambda <- food %>%
features(Turnover, features = guerrero) %>% pull(lambda_guerrero)
food %>% autoplot(box_cox(Turnover,lambda)) +
labs(y = "Box-Cox transformed turnover")
food %>% autoplot(log(Turnover)) +
labs(y = "Box-Cox transformed turnover")
us_retail_employment <- us_employment %>%
filter(year(Month) >= 1990, Title == "Retail Trade") %>%
select(-Series_ID)
us_retail_employment %>%
model(classical_decomposition(Employed, type = "additive")) %>%
components() %>%
autoplot() + xlab("Year") +
ggtitle("Classical additive decomposition of total US retail employment")
View(us_retail_employment)
x11_dcmp <- us_retail_employment %>%
model(x11 = feasts:::X11(Employed, type = "additive"))
install.packages("seasonal")
x11_dcmp <- us_retail_employment %>%
model(x11 = feasts:::X11(Employed, type = "additive"))
x11_dcmp <- us_retail_employment %>%
model(x11 = feasts:::X11(Employed, type = "additive")) %>%
components()
x11_dcmp <- us_retail_employment %>%
model(x11 = feasts:::X11(Employed, type = "additive")) %>%
components()
autoplot(x11_dcmp) + xlab("Year") +
ggtitle("Additive X11 decomposition of US retail employment in the US")
seats_dcmp <- us_retail_employment %>%
model(seats = feasts:::SEATS(Employed)) %>%
components()
autoplot(seats_dcmp) + xlab("Year") +
ggtitle("SEATS decomposition of total US retail employment")
bricks <- aus_production %>% filter_index("1970 Q1" ~ "2004 Q4")
bricks <- aus_production %>% filter_index("1970 Q1" ~ "2004 Q4")
bricks %>% model(MEAN(Bricks))
eu_retail <- as_tsibble(fpp3::euretail)
eu_retail <- as_tsibble(fpp2::euretail)
eu_retail %>% autoplot(value) + ylab("Retail index") + xlab("Year")
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "ForeCA", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand) +
xlab("Year: 2014") + ylab("GW",) +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Demand) +
xlab("Year: 2014") + ylab("GW") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
vic_elec %>%
filter(year(Time) == 2014) %>%
autoplot(Temperature) +
xlab("Year: 2014") + ylab("Degrees Celsius") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
# Traint test split
recent_production <- aus_production %>% filter(year(Quarter) >= 1992)
beer_train <- recent_production %>% filter(year(Quarter) <= 2007)
# Model fit
beer_fit <- beer_train %>%
model(
Mean = MEAN(Beer),
`Naïve` = NAIVE(Beer),
`Seasonal naïve` = SNAIVE(Beer),
Drift = RW(Beer ~ drift())
)
# Forecasting
beer_fc <- beer_fit %>%
forecast(h = 10)
# Forecast visualization
beer_fc %>%
autoplot(filter(aus_production, year(Quarter) >= 1992), level = NULL) +
xlab("Year") + ylab("Megalitres") +
ggtitle("Forecasts for quarterly beer production") +
guides(colour=guide_legend(title="Forecast"))
# Accuracy
accuracy(beer_fc, recent_production) %>% select(-c(.type, ME, MPE, ACF1, RMSSE ))
