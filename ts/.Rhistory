if (!fabletools::is_mable(data)) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
data <- stats::residuals(data)
if (n_keys(data) > 1) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
gg_tsdisplay(data, !!sym(".resid"), plot_type = "partial",
...)
}
# Validación cruzada anidada
nested_cv <- function(df, h, last_train, string_formula){
nested_errors <- vector()
for (i in seq(last_train, last(df$date), h)){
train <- df %>% filter(date<=i)
test <- df %>% filter(date>i)
fitted_model <- train %>%
model(arima = ARIMA(as.formula(string_formula)))
h_forecast = min(dim(test)[1], h)
fc <- fitted_model %>%
forecast(h=h_forecast)
test_err <- fc %>%
accuracy(test) %>%
select(MAPE)
nested_errors <- c(nested_errors, test_err$MAPE)
NewList <- list("errors"=nested_errors, "mean"=mean(nested_errors))
}
return(NewList)}
# Test de autocorrelacines de los residuos
autocorrelation_test_plot <- function(aug, dof = 4, m = 7,  h = 5, alpha = 0.05){
vec <- c()
num_lags = seq(1, h*m)
for (i in num_lags){
vec <- c(vec,aug %>% features(.resid, ljung_box, lag=i, dof=dof) %>% .$lb_pvalue)
}
autocorr_pvalues_resid <- tibble(
lag = num_lags,
p_value = vec,
incorelated = p_value >= alpha
)
plot <- autocorr_pvalues_resid %>%
drop_na() %>%
ggplot(aes(lag, p_value, color = incorelated)) +
geom_point() +
geom_hline(aes(yintercept = alpha), linetype="dashed", color = "indianred2")
newList <- list("values" = autocorr_pvalues_resid, "plot" = plot)
return(newList)
}
# Autocorrelaciones de los residuos opción 2
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals = TRUE){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
if (show_pvals) {
plot(pvals)
abline(0.05, 0)
}
return(pvals)
}
air = as_tsibble(AirPassengers, index = date)
air$index
air %>%
autoplot(value) +
labs(title = "Monthly totals of international airline passengers") +
xlab("Year") + ylab("passengers")
air_train <- air %>% filter_index(. ~ "1959-12")
air_test <- air %>% filter_index("1960-01" ~ .)
air_train %>%
gg_season(value, labels = "right")
air_train %>%
model(seats = feasts:::SEATS(value)) %>%
components() %>%
autoplot()
lambda <- air_train %>%
features(value, features = guerrero) %>% pull(lambda_guerrero)
lambda
air_train %>% autoplot(log(value)) +
labs(y = "Log transformed")
air_train %>%
features(log(value), unitroot_kpss)
air_train %>%
features(difference(log(value), 1), unitroot_kpss)
air_train %>% autoplot(difference(log(value), 1))
air_train %>%
mutate(log_turnover = difference(log(value),1)) %>%
features(log_turnover, unitroot_nsdiffs)
fit <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,0) + PDQ(0,1,0)))
fit %>% my_tsresiduals(lag_max =36)
fit2 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,0)))
fit2 %>% my_tsresiduals(lag_max =36)
report(fit2)
my_t_test(fit2)
gg_arma(fit2)
fit3 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,1)))
fit3 %>% my_tsresiduals(lag_max =36)
report(fit3)
my_t_test(fit3)
aug <-fit3 %>% augment()
# Histogram
aug %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 50) +
ggtitle("Histogram of residuals")
# Student's t-Test for mean=0
t.test(aug$.resid)
# Ljung-Box autocorrelation lag=2*m
aug %>% features(.resid, ljung_box, lag=24, dof=2)
pvals = autocorrelation_test_plot(aug, m = 12, dof = 2, h = 2, alpha = 0.05)
pvals
log_log <- aug %>% as_tibble() %>%
group_by(year(index)) %>%
summarize(mean_resid = log(mean(.resid+1)), std_resid = log(sd(.resid+1)))
summary(lm(std_resid~mean_resid, log_log))
# Jarque Bera test
jb.norm.test(na.omit(aug$.resid))
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
# Contraste para los coeficientes
my_t_test <- function (object, ...)
{
par <- rbind(t_stat=tidy(object)$statistic, p_value=tidy(object)$p.value)
colnames(par) <- tidy(object)$term
if (NCOL(par) > 0) {
cat("\nt-test:\n")
coef <- round(par, digits = 4)
print.default(coef, print.gap = 2)
}
}
# Gráfico de correlogramas de residuos
my_tsresiduals <- function (data, ...) {
if (!fabletools::is_mable(data)) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
data <- stats::residuals(data)
if (n_keys(data) > 1) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
gg_tsdisplay(data, !!sym(".resid"), plot_type = "partial",
...)
}
# Validación cruzada anidada
nested_cv <- function(df, h, last_train, string_formula){
nested_errors <- vector()
for (i in seq(last_train, last(df$date), h)){
train <- df %>% filter(date<=i)
test <- df %>% filter(date>i)
fitted_model <- train %>%
model(arima = ARIMA(as.formula(string_formula)))
h_forecast = min(dim(test)[1], h)
fc <- fitted_model %>%
forecast(h=h_forecast)
test_err <- fc %>%
accuracy(test) %>%
select(MAPE)
nested_errors <- c(nested_errors, test_err$MAPE)
NewList <- list("errors"=nested_errors, "mean"=mean(nested_errors))
}
return(NewList)}
# Test de autocorrelacines de los residuos
autocorrelation_test_plot <- function(aug, dof = 4, m = 7,  h = 5, alpha = 0.05){
vec <- c()
num_lags = seq(1, h*m)
for (i in num_lags){
vec <- c(vec,aug %>% features(.resid, ljung_box, lag=i, dof=dof) %>% .$lb_pvalue)
}
autocorr_pvalues_resid <- tibble(
lag = num_lags,
p_value = vec,
incorelated = p_value >= alpha
)
plot <- autocorr_pvalues_resid %>%
drop_na() %>%
ggplot(aes(lag, p_value, color = incorelated)) +
geom_point() +
geom_hline(aes(yintercept = alpha), linetype="dashed", color = "indianred2")
newList <- list("values" = autocorr_pvalues_resid, "plot" = plot)
return(newList)
}
# Autocorrelaciones de los residuos opción 2
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals = TRUE){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
if (show_pvals) {
plot(pvals)
abline(0.05, 0)
}
return(pvals)
}
air = as_tsibble(AirPassengers, index = date)
air$index
air %>%
autoplot(value) +
labs(title = "Monthly totals of international airline passengers") +
xlab("Year") + ylab("passengers")
air_train <- air %>% filter_index(. ~ "1959-12")
air_test <- air %>% filter_index("1960-01" ~ .)
air_train %>%
gg_season(value, labels = "right")
air_train %>%
model(seats = feasts:::SEATS(value)) %>%
components() %>%
autoplot()
lambda <- air_train %>%
features(value, features = guerrero) %>% pull(lambda_guerrero)
lambda
air_train %>% autoplot(log(value)) +
labs(y = "Log transformed")
air_train %>%
features(log(value), unitroot_kpss)
air_train %>%
features(difference(log(value), 1), unitroot_kpss)
air_train %>% autoplot(difference(log(value), 1))
air_train %>%
mutate(log_turnover = difference(log(value),1)) %>%
features(log_turnover, unitroot_nsdiffs)
fit <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,0) + PDQ(0,1,0)))
fit %>% my_tsresiduals(lag_max =36)
fit2 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,0)))
fit2 %>% my_tsresiduals(lag_max =36)
report(fit2)
my_t_test(fit2)
gg_arma(fit2)
fit3 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,1)))
fit3 %>% my_tsresiduals(lag_max =36)
report(fit3)
my_t_test(fit3)
aug <-fit3 %>% augment()
# Histogram
aug %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 50) +
ggtitle("Histogram of residuals")
# Student's t-Test for mean=0
t.test(aug$.resid)
# Ljung-Box autocorrelation lag=2*m
aug %>% features(.resid, ljung_box, lag=24, dof=2)
pvals = autocorrelation_test_plot(aug, m = 12, dof = 2, h = 2, alpha = 0.05)
pvals
log_log <- aug %>% as_tibble() %>%
group_by(year(index)) %>%
summarize(mean_resid = log(mean(.resid+1)), std_resid = log(sd(.resid+1)))
summary(lm(std_resid~mean_resid, log_log))
# Jarque Bera test
jb.norm.test(na.omit(aug$.resid))
knitr::opts_chunk$set(echo = TRUE)
for (package in c("tidyverse","fpp3", "GGally", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
# Contraste para los coeficientes
my_t_test <- function (object, ...)
{
par <- rbind(t_stat=tidy(object)$statistic, p_value=tidy(object)$p.value)
colnames(par) <- tidy(object)$term
if (NCOL(par) > 0) {
cat("\nt-test:\n")
coef <- round(par, digits = 4)
print.default(coef, print.gap = 2)
}
}
# Gráfico de correlogramas de residuos
my_tsresiduals <- function (data, ...) {
if (!fabletools::is_mable(data)) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
data <- stats::residuals(data)
if (n_keys(data) > 1) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
gg_tsdisplay(data, !!sym(".resid"), plot_type = "partial",
...)
}
# Validación cruzada anidada
nested_cv <- function(df, h, last_train, string_formula){
nested_errors <- vector()
for (i in seq(last_train, last(df$date), h)){
train <- df %>% filter(date<=i)
test <- df %>% filter(date>i)
fitted_model <- train %>%
model(arima = ARIMA(as.formula(string_formula)))
h_forecast = min(dim(test)[1], h)
fc <- fitted_model %>%
forecast(h=h_forecast)
test_err <- fc %>%
accuracy(test) %>%
select(MAPE)
nested_errors <- c(nested_errors, test_err$MAPE)
NewList <- list("errors"=nested_errors, "mean"=mean(nested_errors))
}
return(NewList)}
# Test de autocorrelacines de los residuos
autocorrelation_test_plot <- function(aug, dof = 4, m = 7,  h = 5, alpha = 0.05){
vec <- c()
num_lags = seq(1, h*m)
for (i in num_lags){
vec <- c(vec,aug %>% features(.resid, ljung_box, lag=i, dof=dof) %>% .$lb_pvalue)
}
autocorr_pvalues_resid <- tibble(
lag = num_lags,
p_value = vec,
incorelated = p_value >= alpha
)
plot <- autocorr_pvalues_resid %>%
drop_na() %>%
ggplot(aes(lag, p_value, color = incorelated)) +
geom_point() +
geom_hline(aes(yintercept = alpha), linetype="dashed", color = "indianred2")
newList <- list("values" = autocorr_pvalues_resid, "plot" = plot)
return(newList)
}
# Autocorrelaciones de los residuos opción 2
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals = TRUE){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
if (show_pvals) {
plot(pvals)
abline(0.05, 0)
}
return(pvals)
}
air = as_tsibble(AirPassengers, index = date)
air$index
air %>%
autoplot(value) +
labs(title = "Monthly totals of international airline passengers") +
xlab("Year") + ylab("passengers")
air_train <- air %>% filter_index(. ~ "1959-12")
air_test <- air %>% filter_index("1960-01" ~ .)
air_train %>%
gg_season(value, labels = "right")
air_train %>%
model(seats = feasts:::SEATS(value)) %>%
components() %>%
autoplot()
lambda <- air_train %>%
features(value, features = guerrero) %>% pull(lambda_guerrero)
lambda
air_train %>% autoplot(log(value)) +
labs(y = "Log transformed")
air_train %>%
features(log(value), unitroot_kpss)
air_train %>%
features(difference(log(value), 1), unitroot_kpss)
air_train %>% autoplot(difference(log(value), 1))
air_train %>%
mutate(log_turnover = difference(log(value),1)) %>%
features(log_turnover, unitroot_nsdiffs)
fit <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,0) + PDQ(0,1,0)))
fit %>% my_tsresiduals(lag_max =36)
fit2 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,0)))
fit2 %>% my_tsresiduals(lag_max =36)
report(fit2)
my_t_test(fit2)
gg_arma(fit2)
fit3 <- air_train %>%
model(arima = ARIMA(log(value) ~ pdq(0,1,1) + PDQ(0,1,1)))
fit3 %>% my_tsresiduals(lag_max =36)
report(fit3)
my_t_test(fit3)
aug <-fit3 %>% augment()
# Histogram
aug %>%
ggplot(aes(x = .resid)) +
geom_histogram(bins = 50) +
ggtitle("Histogram of residuals")
# Student's t-Test for mean=0
t.test(aug$.resid)
# Ljung-Box autocorrelation lag=2*m
aug %>% features(.resid, ljung_box, lag=24, dof=2)
pvals = autocorrelation_test_plot(aug, m = 12, dof = 2, h = 2, alpha = 0.05)
pvals
log_log <- aug %>% as_tibble() %>%
group_by(year(index)) %>%
summarize(mean_resid = log(mean(.resid+1)), std_resid = log(sd(.resid+1)))
summary(lm(std_resid~mean_resid, log_log))
# Jarque Bera test
jb.norm.test(na.omit(aug$.resid))
# Residual accuracy
resids <- fit3 %>%
accuracy() %>%
select(-c(.model, .type, ME, MPE, ACF1 )) %>%
mutate(Evaluation='Training')
# Forecasting
fc <- fit3 %>%
forecast(h=12)
test_err <- fc %>%
accuracy(air) %>%
select(-c(.model, .type, ME, MPE, ACF1 )) %>%
mutate(Evaluation='Test')
# Show errors together
bind_rows(test_err, resids) %>% select(Evaluation, everything())
aug %>%  ggplot() +
geom_line(aes(x = index, y = .fitted), color="navy") +
geom_line(aes(x = index, y = value), color="gray24") +
# geom_line(data=air_forecast, aes(x = index, y = value), color="red4") +
ggtitle("SARIMA train fitted values") +
xlab('Dates') +
ylab('Passengers') + facet_wrap(vars(year(index)), scales = 'free')
fit3 %>%
forecast(h=12) %>%
autoplot(air)
for (package in c("tidyverse","fpp3", "GGally", "normtest")) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
# Contraste para los coeficientes
my_t_test <- function (object, ...)
{
par <- rbind(t_stat=tidy(object)$statistic, p_value=tidy(object)$p.value)
colnames(par) <- tidy(object)$term
if (NCOL(par) > 0) {
cat("\nt-test:\n")
coef <- round(par, digits = 4)
print.default(coef, print.gap = 2)
}
}
# Gráfico de correlogramas de residuos
my_tsresiduals <- function (data, ...) {
if (!fabletools::is_mable(data)) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
data <- stats::residuals(data)
if (n_keys(data) > 1) {
abort("gg_tsresiduals() must be used with a mable containing only one model.")
}
gg_tsdisplay(data, !!sym(".resid"), plot_type = "partial",
...)
}
# Validación cruzada anidada
nested_cv <- function(df, h, last_train, string_formula){
nested_errors <- vector()
for (i in seq(last_train, last(df$date), h)){
train <- df %>% filter(date<=i)
test <- df %>% filter(date>i)
fitted_model <- train %>%
model(arima = ARIMA(as.formula(string_formula)))
h_forecast = min(dim(test)[1], h)
fc <- fitted_model %>%
forecast(h=h_forecast)
test_err <- fc %>%
accuracy(test) %>%
select(MAPE)
nested_errors <- c(nested_errors, test_err$MAPE)
NewList <- list("errors"=nested_errors, "mean"=mean(nested_errors))
}
return(NewList)}
# Test de autocorrelacines de los residuos
autocorrelation_test_plot <- function(aug, dof = 4, m = 7,  h = 5, alpha = 0.05){
vec <- c()
num_lags = seq(1, h*m)
for (i in num_lags){
vec <- c(vec,aug %>% features(.resid, ljung_box, lag=i, dof=dof) %>% .$lb_pvalue)
}
autocorr_pvalues_resid <- tibble(
lag = num_lags,
p_value = vec,
incorelated = p_value >= alpha
)
plot <- autocorr_pvalues_resid %>%
drop_na() %>%
ggplot(aes(lag, p_value, color = incorelated)) +
geom_point() +
geom_hline(aes(yintercept = alpha), linetype="dashed", color = "indianred2")
newList <- list("values" = autocorr_pvalues_resid, "plot" = plot)
return(newList)
}
# Autocorrelaciones de los residuos opción 2
resid_corr <- function(modelo, dof_modelo, estacionalidad, show_pvals = TRUE){
pvals <- c()
for (lag_i in seq(1, 2*estacionalidad)) {
pormateau_i <- modelo %>% features(.resid, ljung_box, lag = lag_i, dof = dof_modelo)
pvals <- c(pvals, pormateau_i$lb_pvalue)
}
if (show_pvals) {
plot(pvals)
abline(0.05, 0)
}
return(pvals)
}
air = as_tsibble(AirPassengers, index = date)
air$index
air %>%
autoplot(value) +
labs(title = "Monthly totals of international airline passengers") +
xlab("Year") + ylab("passengers")
air_train <- air %>% filter_index(. ~ "1959-12")
air_test <- air %>% filter_index("1960-01" ~ .)
